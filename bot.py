import os
import urllib.request
from typing import List, Any
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from setting import API_TOKEN, PING_TIME, IP_LIST, DOMAIN_LIST, CHAT_IDS

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

menu_buttons = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
menu_buttons.row(types.KeyboardButton(text="üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏"), types.KeyboardButton(text="üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"))

async def get_ping_result(node):
    response = os.system("ping -c 1 " + node[0])
    return '‚úÖ' if response == 0 else '‚ùå'

async def get_http_response_code(node):
    try:
        response = urllib.request.urlopen(node[0]).getcode()
    except:
        response = 404
    return response

async def send_network_test_results_error():
    error_message = '–°–ª–µ–¥—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:\n'
    error_occurred = False

    for node in IP_LIST:
        result = await get_ping_result(node)
        if result == '‚ùå':
            error_occurred = True
            error_message += f"\n‚ùå {node[1]}\nIP –∞–¥—Ä–µ—Å {node[0]}\n"

    for node in DOMAIN_LIST:
        response = await get_http_response_code(node)
        if response != 200:
            error_occurred = True
            error_message += f"\n‚ùå {node[1]}\n–î–æ–º–µ–Ω {node[0]}({response})\n"

    if error_occurred:
        for chat_id in CHAT_IDS:
            await bot.send_message(chat_id=chat_id, text=error_message, reply_markup=menu_buttons)

@dp.message_handler(text='üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
async def send_welcome(message: types.Message):
    msg = "–ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    await message.answer(msg, reply_markup=menu_buttons)
    while True:
        await send_network_test_results_error()
        await asyncio.sleep(PING_TIME)

@dp.message_handler(text=['üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏'])
async def send_welcome(message: types.Message):
    msg = "–ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏..."
    await message.answer(msg, reply_markup=menu_buttons)
    answer = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏:\n"
    for node in IP_LIST:
        result = await get_ping_result(node)
        answer += f"\n{result} {node[1]}\nIP –∞–¥—Ä–µ—Å {node[0]}\n"

    for node in DOMAIN_LIST:
        response = await get_http_response_code(node)
        result = '‚úÖ' if response == 200 else '‚ùå'
        answer += f"\n{result} {node[1]}\n–î–æ–º–µ–Ω {node[0]} ({response})\n"

    await message.reply(answer, reply_markup=menu_buttons)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    msg = "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! ‚≠êÔ∏è\n–Ø –ø—Ä–æ–≤–æ–∂—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. üñ•Ô∏èüîå"
    await message.answer(msg, reply_markup=menu_buttons)

@dp.message_handler()
async def echo(message: types.Message):
    msg = "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! ‚≠êÔ∏è\n–Ø –ø—Ä–æ–≤–æ–∂—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. üñ•Ô∏èüîå"
    await message.answer(msg, reply_markup=menu_buttons)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)